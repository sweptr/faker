#!/usr/bin/env perl

use strict;
use warnings;

package faker;

use File::Spec;
use File::Basename;

my $USAGE = <<'...';
Usage: faker [command] <args>
    build
      base <name> [Fakerfile]                   build base image by Fakerfile
      container <base image> <name> [Fakerfile] build container image by Fakerfile

    rm  <base|container> <name>                 remove base or container image
    run <container> <command>                   run command with container
    help                                        Show this ;-)
...

my $HOME        = $ENV{'HOME'};
my $FAKERDIR    = File::Spec->catdir( $HOME, '.faker' );

my $DISTNAME    = 'squeeze';
my $DISTURL     = 'http://ftp.jp.debian.org/debian/';

exit( &main() );

sub main {
    my $command = shift @ARGV or die $USAGE;
    my @args    = @ARGV;

    my $action  = faker->can("cmd_${command}");
    die "Unknown command: ${command}"
        if ( ref($action) ne 'CODE' );

    exit( $action->( @args ) );
}

sub cmd_help {
    print $USAGE;
    return 1;
}

sub cmd_build {
    my ( $type, @args ) = @_;
    die "Unsupported build type: ${type}"
        if ( $type ne 'base' && $type ne 'container' );

    my ( $name, $fakerfile, $basename );

    if ( $type eq 'base' ) {
        ( $name, $fakerfile ) = @args;
    } else {
        ( $basename, $name, $fakerfile ) = @args;
    }

    if ( ! defined $name || $name eq q{} ) {
        die "-----> !ERROR: image name is not specified."
    }

    my $basedir  = File::Spec->catdir( $FAKERDIR, 'base', $name );
    my $imagedir = File::Spec->catdir( $FAKERDIR, 'container', $name );

    my $workdir  = ( $type eq 'base' ) ? $basedir : $imagedir ; 

    my $statefile = File::Spec->catfile( $workdir, 'fakeroot.state' );
    my $chrootdir = File::Spec->catdir(  $workdir, 'root' );

    if ( -e $workdir ) {
        my $code = system(qw[ rm -r ], $workdir);
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );
    }

    do {
        my $code = system(qw[ mkdir -p ], $workdir);
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );
    };

    print "-----> Bootstrap container image (${type})\n";
    if ( $type eq 'base' ) {
        my $code = system(
            "/usr/bin/env", "PATH=/sbin:/usr/sbin:@{[ $ENV{'PATH'} ]}",
            'fakeroot', '-s', $statefile, 'fakechroot', 'debootstrap', '--include=zsh', '--variant=fakechroot', $DISTNAME, $chrootdir, $DISTURL,
        );

        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );
    } elsif ( $type eq 'container' ) {
        die "-----> !ERROR: base image is not specified."
            if ( ! defined $basename || $basename eq q{} );

        my $baseimage = File::Spec->catdir( $FAKERDIR, 'base', $basename, 'root' );
        
        my $code = system('/bin/cp', "-R", "-l", $baseimage, qq<${imagedir}/>);
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );
    }

    if ( defined $fakerfile && $fakerfile ne q{} && -e $fakerfile ) {
        my $builder = File::Spec->catdir( $chrootdir, 'root', 'Fakerfile' );

        print "-----> Build container image by ${fakerfile}\n";

        my $code = 0;

        $code = system('/bin/bash', "-c", "echo -n '' > ${statefile}");
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );

        $code = system('/bin/cp', $fakerfile, $builder);
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );

        $code = system('/bin/chmod', "+x", $builder);
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );

        $code = system( '/usr/bin/env', "HOME=/root", "/usr/bin/fakeroot", "-i", $statefile, "/usr/bin/fakechroot", "/usr/sbin/chroot", $chrootdir, "/root/Fakerfile" );
        die "-----> !ERROR: exit code is: ${code}" if ( $code != 0 );
    }

    print "-----> Finished the all ;-)\n";
    return 0;
}

sub cmd_rm {
    my ( $type, $name ) = @_;
    die "Unsupported build type: ${type}"
        if ( $type ne 'base' && $type ne 'container' );
        
    my $basedir  = File::Spec->catdir( $FAKERDIR, 'base', $name );
    my $imagedir = File::Spec->catdir( $FAKERDIR, 'container', $name );

    my $target   = ( $type eq 'base' ) ? $basedir : $imagedir ;
    return exec(
        "/bin/rm", "-r", $target,
    )
}

sub cmd_run {
    my ( $container, $cmd ) = @_;
    
    my $imagedir    = File::Spec->catdir( $HOME, '.faker', 'container', $container );
    my $statefile   = File::Spec->catfile( $imagedir, 'fakeroot.state' );
    my $chrootdir   = File::Spec->catdir( $imagedir, 'root' );

    my $code = system('/bin/bash', '-c', "echo -n '' > ${statefile}");
    die "!ERROR: exit code is: ${code}" if ( $code != 0 );

    return exec(
        "/usr/bin/env", "HOME=/root", "/usr/bin/fakeroot", "-i", $statefile, "/usr/bin/fakechroot", "/usr/sbin/chroot", $chrootdir, $cmd
    );
}

1;

